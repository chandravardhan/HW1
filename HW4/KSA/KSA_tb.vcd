$date
	Sun Oct  3 19:57:09 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module KSA_tb $end
$var wire 5 ! sum [4:0] $end
$var reg 4 " a [3:0] $end
$var reg 4 # b [3:0] $end
$var reg 1 $ c_in $end
$scope module ksa1 $end
$var wire 4 % a [3:0] $end
$var wire 4 & b [3:0] $end
$var wire 1 $ c_in $end
$var wire 5 ' sum [4:0] $end
$var reg 4 ( carry [3:0] $end
$var reg 4 ) g [3:0] $end
$var reg 4 * g1 [3:0] $end
$var reg 4 + g2 [3:0] $end
$var reg 4 , p [3:0] $end
$var reg 4 - p1 [3:0] $end
$var reg 4 . p2 [3:0] $end
$var reg 4 / s [3:0] $end
$var integer 32 0 i [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b100 0
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
b0 )
b0 (
b0 '
b0 &
b0 %
0$
b0 #
b0 "
b0 !
$end
#2
b110 !
b110 '
b110 /
b100 -
b110 ,
b100 0
b100 #
b100 &
b10 "
b10 %
#4
b1100 !
b1100 '
b1100 /
b1000 -
b1100 ,
b100 0
b1000 #
b1000 &
b100 "
b100 %
#6
b1100 (
b1100 +
b10010 !
b10010 '
b10 /
b0 -
b1100 *
b100 )
b1010 ,
b100 0
b1100 #
b1100 &
b110 "
b110 %
#8
b0 (
b0 +
b1000 !
b1000 '
b1000 /
b0 *
b0 )
b1000 ,
b100 0
b0 #
b0 &
b1000 "
b1000 %
#10
b111 .
b111 !
b111 '
b111 /
b111 -
b111 ,
b100 0
b100 #
b100 &
b11 "
b11 %
#12
b1 .
b1101 !
b1101 '
b1101 /
b1001 -
b1101 ,
b100 0
b1000 #
b1000 &
b101 "
b101 %
#14
b1100 (
b1100 +
b11 .
b10011 !
b10011 '
b11 /
b1100 *
b11 -
b100 )
b1011 ,
b100 0
b1100 #
b1100 &
b111 "
b111 %
#16
b0 (
b0 +
b1 .
b1001 !
b1001 '
b1001 /
b0 *
b1 -
b0 )
b1001 ,
b100 0
b0 #
b0 &
b1001 "
b1001 %
#18
b1111 .
b1111 !
b1111 '
b1111 /
b1111 -
b1111 ,
b100 0
b100 #
b100 &
b1011 "
b1011 %
#20
b1100 (
b1100 +
b1 .
b10001 !
b10001 '
b1 /
b1100 *
b1 -
b100 )
b1001 ,
b100 0
b1101 "
b1101 %
b100 #
b100 &
#22
b1000 (
b1000 +
b111 .
b10111 !
b10111 '
b111 /
b1000 *
b111 -
b1000 )
b111 ,
b100 0
b1000 #
b1000 &
b1111 "
b1111 %
#24
b0 (
b0 +
b1 .
b1101 !
b1101 '
b1101 /
b0 *
b1001 -
b0 )
b1101 ,
b100 0
b1100 #
b1100 &
b1 "
b1 %
#26
b11 .
b11 !
b11 '
b11 /
b11 -
b11 ,
b100 0
b0 #
b0 &
b11 "
b11 %
#28
b100 (
b100 +
b1 .
b1001 !
b1001 '
b1001 /
b100 *
b1 -
b100 )
b1 ,
b100 0
b100 #
b100 &
b101 "
b101 %
#30
b0 (
b0 +
b1111 .
b1111 !
b1111 '
b1111 /
b0 *
b1111 -
b0 )
b1111 ,
b100 0
b1000 #
b1000 &
b111 "
b111 %
#32
b1000 (
b1000 +
b1 .
b10101 !
b10101 '
b101 /
b1000 *
b1 -
b1000 )
b101 ,
b100 0
b1100 #
b1100 &
b1001 "
b1001 %
#34
b0 (
b0 +
b11 .
b1011 !
b1011 '
b1011 /
b0 *
b11 -
b0 )
b1011 ,
b100 0
b0 #
b0 &
b1011 "
b1011 %
#36
b1100 (
b1100 +
b1 .
b10001 !
b10001 '
b1 /
b1100 *
b1 -
b100 )
b1001 ,
b100 0
b100 #
b100 &
b1101 "
b1101 %
#38
b1000 (
b1000 +
b111 .
b10111 !
b10111 '
b111 /
b1000 *
b111 -
b1000 )
b111 ,
b100 0
b1000 #
b1000 &
b1111 "
b1111 %
#40
b0 (
b0 +
b1 .
b1101 !
b1101 '
b1101 /
b0 *
b1001 -
b0 )
b1101 ,
b100 0
b1100 #
b1100 &
b1 "
b1 %
#42
b11 .
b11 !
b11 '
b11 /
b11 -
b11 ,
b100 0
b0 #
b0 &
b11 "
b11 %
#44
b100 (
b100 +
b1 .
b1001 !
b1001 '
b1001 /
b100 *
b1 -
b100 )
b1 ,
b100 0
b100 #
b100 &
b101 "
b101 %
#46
b0 (
b0 +
b1111 .
b1111 !
b1111 '
b1111 /
b0 *
b1111 -
b0 )
b1111 ,
b100 0
b1000 #
b1000 &
b111 "
b111 %
#48
b1000 (
b1000 +
b1 .
b10101 !
b10101 '
b101 /
b1000 *
b1 -
b1000 )
b101 ,
b100 0
b1100 #
b1100 &
b1001 "
b1001 %
#50
b0 (
b0 +
b0 .
b10 !
b10 '
b10 /
b0 *
b0 -
b0 )
b10 ,
b100 0
b0 #
b0 &
b10 "
b10 %
#52
b100 (
b100 +
b1000 !
b1000 '
b1000 /
b100 *
b100 )
b0 ,
b100 0
b100 #
b100 &
b100 "
b100 %
#54
b0 (
b0 +
b1110 !
b1110 '
b1110 /
b0 *
b1100 -
b0 )
b1110 ,
b100 0
b1000 #
b1000 &
b110 "
b110 %
#56
b1000 (
b1000 +
b10100 !
b10100 '
b100 /
b1000 *
b0 -
b1000 )
b100 ,
b100 0
b1100 #
b1100 &
b1000 "
b1000 %
#58
b0 (
b0 +
b1010 !
b1010 '
b1010 /
b0 *
b0 )
b1010 ,
b100 0
b0 #
b0 &
b1010 "
b1010 %
#60
b1100 (
b1100 +
b10000 !
b10000 '
b0 /
b1100 *
b100 )
b1000 ,
b100 0
b100 #
b100 &
b1100 "
b1100 %
#62
b1000 (
b1000 +
b10110 !
b10110 '
b110 /
b1000 *
b100 -
b1000 )
b110 ,
b100 0
b1000 #
b1000 &
b1110 "
b1110 %
#64
b0 (
b0 +
b1100 !
b1100 '
b1100 /
b0 *
b1000 -
b0 )
b1100 ,
b100 0
b1100 #
b1100 &
b0 "
b0 %
#66
b10 !
b10 '
b10 /
b0 -
b10 ,
b100 0
b0 #
b0 &
b10 "
b10 %
#68
b100 (
b100 +
b1000 !
b1000 '
b1000 /
b100 *
b100 )
b0 ,
b100 0
b100 #
b100 &
b100 "
b100 %
#70
b11 .
b1011 !
b1011 '
b1011 /
b11 -
b11 ,
b100 0
b110 "
b110 %
b101 #
b101 &
#72
b1000 (
b1000 +
b1 .
b10001 !
b10001 '
b1 /
b1000 *
b1 -
b1000 )
b1 ,
b100 0
b1001 #
b1001 &
b1000 "
b1000 %
#74
b111 .
b10111 !
b10111 '
b111 /
b111 -
b111 ,
b100 0
b1101 #
b1101 &
b1010 "
b1010 %
#76
b0 (
b0 +
b1 .
b1101 !
b1101 '
b1101 /
b0 *
b1001 -
b0 )
b1101 ,
b100 0
b1 #
b1 &
b1100 "
b1100 %
#78
b1100 (
b1100 +
b11 .
b10011 !
b10011 '
b11 /
b1100 *
b11 -
b100 )
b1011 ,
b100 0
b101 #
b101 &
b1110 "
b1110 %
#80
b0 (
b0 +
b1 .
b1001 !
b1001 '
b1001 /
b0 *
b1 -
b0 )
b1001 ,
b100 0
b1001 #
b1001 &
b0 "
b0 %
#82
b1111 .
b1111 !
b1111 '
b1111 /
b1111 -
b1111 ,
b100 0
b1101 #
b1101 &
b10 "
b10 %
#84
b1 .
b101 !
b101 '
b101 /
b1 -
b101 ,
b100 0
b1 #
b1 &
b100 "
b100 %
#86
b100 (
b100 +
b11 .
b1011 !
b1011 '
b1011 /
b100 *
b11 -
b100 )
b11 ,
b100 0
b101 #
b101 &
b110 "
b110 %
#88
b1000 (
b1000 +
b1 .
b10001 !
b10001 '
b1 /
b1000 *
b1 -
b1000 )
b1 ,
b100 0
b1001 #
b1001 &
b1000 "
b1000 %
#90
b111 .
b10111 !
b10111 '
b111 /
b111 -
b111 ,
b100 0
b1101 #
b1101 &
b1010 "
b1010 %
#92
b0 (
b0 +
b1 .
b1101 !
b1101 '
b1101 /
b0 *
b1001 -
b0 )
b1101 ,
b100 0
b1 #
b1 &
b1100 "
b1100 %
#94
b1100 (
b1100 +
b11 .
b10011 !
b10011 '
b11 /
b1100 *
b11 -
b100 )
b1011 ,
b100 0
b101 #
b101 &
b1110 "
b1110 %
#96
b0 (
b0 +
b1 .
b1001 !
b1001 '
b1001 /
b0 *
b1 -
b0 )
b1001 ,
b100 0
b1001 #
b1001 &
b0 "
b0 %
#98
b1111 .
b1111 !
b1111 '
b1111 /
b1111 -
b1111 ,
b100 0
b1101 #
b1101 &
b10 "
b10 %
#100
b1 .
b101 !
b101 '
b101 /
b1 -
b101 ,
b100 0
b1 #
b1 &
b100 "
b100 %
#102
b100 (
b100 +
b11 .
b1011 !
b1011 '
b1011 /
b100 *
b11 -
b100 )
b11 ,
b100 0
b101 #
b101 &
b110 "
b110 %
#104
b1000 (
b1000 +
b1 .
b10001 !
b10001 '
b1 /
b1000 *
b1 -
b1000 )
b1 ,
b100 0
b1001 #
b1001 &
b1000 "
b1000 %
#106
b111 .
b10111 !
b10111 '
b111 /
b111 -
b111 ,
b100 0
b1101 #
b1101 &
b1010 "
b1010 %
#108
b0 (
b0 +
b1 .
b1101 !
b1101 '
b1101 /
b0 *
b1001 -
b0 )
b1101 ,
b100 0
b1 #
b1 &
b1100 "
b1100 %
#110
b1100 (
b1100 +
b11 .
b10011 !
b10011 '
b11 /
b1100 *
b11 -
b100 )
b1011 ,
b100 0
b101 #
b101 &
b1110 "
b1110 %
#112
b0 (
b0 +
b1 .
b1001 !
b1001 '
b1001 /
b0 *
b1 -
b0 )
b1001 ,
b100 0
b1001 #
b1001 &
b0 "
b0 %
#114
b1111 .
b1111 !
b1111 '
b1111 /
b1111 -
b1111 ,
b100 0
b1101 #
b1101 &
b10 "
b10 %
#116
b1 .
b101 !
b101 '
b101 /
b1 -
b101 ,
b100 0
b1 #
b1 &
b100 "
b100 %
#118
b100 (
b100 +
b11 .
b1011 !
b1011 '
b1011 /
b100 *
b11 -
b100 )
b11 ,
b100 0
b101 #
b101 &
b110 "
b110 %
#120
b1000 (
b1000 +
b1 .
b10001 !
b10001 '
b1 /
b1000 *
b1 -
b1000 )
b1 ,
b100 0
b1001 #
b1001 &
b1000 "
b1000 %
#122
b111 .
b10111 !
b10111 '
b111 /
b111 -
b111 ,
b100 0
b1101 #
b1101 &
b1010 "
b1010 %
#124
b0 (
b0 +
b1 .
b1101 !
b1101 '
b1101 /
b0 *
b1001 -
b0 )
b1101 ,
b100 0
b1 #
b1 &
b1100 "
b1100 %
#126
b1100 (
b1100 +
b11 .
b10011 !
b10011 '
b11 /
b1100 *
b11 -
b100 )
b1011 ,
b100 0
b101 #
b101 &
b1110 "
b1110 %
#128
b0 (
b0 +
b1 .
b1001 !
b1001 '
b1001 /
b0 *
b1 -
b0 )
b1001 ,
b100 0
b1001 #
b1001 &
b0 "
b0 %
#130
b1111 .
b1111 !
b1111 '
b1111 /
b1111 -
b1111 ,
b100 0
b1101 #
b1101 &
b10 "
b10 %
#132
b1 .
b101 !
b101 '
b101 /
b1 -
b101 ,
b100 0
b1 #
b1 &
b100 "
b100 %
#134
b100 (
b100 +
b11 .
b1011 !
b1011 '
b1011 /
b100 *
b11 -
b100 )
b11 ,
b100 0
b101 #
b101 &
b110 "
b110 %
#136
b1000 (
b1000 +
b1 .
b10001 !
b10001 '
b1 /
b1000 *
b1 -
b1000 )
b1 ,
b100 0
b1001 #
b1001 &
b1000 "
b1000 %
#138
b111 .
b10111 !
b10111 '
b111 /
b111 -
b111 ,
b100 0
b1101 #
b1101 &
b1010 "
b1010 %
#140
b0 (
b0 +
b1 .
b1101 !
b1101 '
b1101 /
b0 *
b1001 -
b0 )
b1101 ,
b100 0
b1 #
b1 &
b1100 "
b1100 %
#142
b1100 (
b1100 +
b11 .
b10011 !
b10011 '
b11 /
b1100 *
b11 -
b100 )
b1011 ,
b100 0
b101 #
b101 &
b1110 "
b1110 %
#144
b0 (
b0 +
b1 .
b1001 !
b1001 '
b1001 /
b0 *
b1 -
b0 )
b1001 ,
b100 0
b1001 #
b1001 &
b0 "
b0 %
#146
b1111 .
b1111 !
b1111 '
b1111 /
b1111 -
b1111 ,
b100 0
b1101 #
b1101 &
b10 "
b10 %
#148
b1 .
b101 !
b101 '
b101 /
b1 -
b101 ,
b100 0
b1 #
b1 &
b100 "
b100 %
#150
b100 (
b100 +
b11 .
b1011 !
b1011 '
b1011 /
b100 *
b11 -
b100 )
b11 ,
b100 0
b101 #
b101 &
b110 "
b110 %
#152
b1000 (
b1000 +
b1 .
b10001 !
b10001 '
b1 /
b1000 *
b1 -
b1000 )
b1 ,
b100 0
b1001 #
b1001 &
b1000 "
b1000 %
#154
b111 .
b10111 !
b10111 '
b111 /
b111 -
b111 ,
b100 0
b1101 #
b1101 &
b1010 "
b1010 %
#156
b0 (
b0 +
b1 .
b1101 !
b1101 '
b1101 /
b0 *
b1001 -
b0 )
b1101 ,
b100 0
b1 #
b1 &
b1100 "
b1100 %
#158
b1100 (
b1100 +
b11 .
b10011 !
b10011 '
b11 /
b1100 *
b11 -
b100 )
b1011 ,
b100 0
b101 #
b101 &
b1110 "
b1110 %
#160
b0 (
b0 +
b1 .
b1001 !
b1001 '
b1001 /
b0 *
b1 -
b0 )
b1001 ,
b100 0
b1001 #
b1001 &
b0 "
b0 %
#162
b1111 .
b1111 !
b1111 '
b1111 /
b1111 -
b1111 ,
b100 0
b1101 #
b1101 &
b10 "
b10 %
#164
b1 .
b101 !
b101 '
b101 /
b1 -
b101 ,
b100 0
b1 #
b1 &
b100 "
b100 %
#166
b100 (
b100 +
b11 .
b1011 !
b1011 '
b1011 /
b100 *
b11 -
b100 )
b11 ,
b100 0
b101 #
b101 &
b110 "
b110 %
#168
b1000 (
b1000 +
b1 .
b10001 !
b10001 '
b1 /
b1000 *
b1 -
b1000 )
b1 ,
b100 0
b1001 #
b1001 &
b1000 "
b1000 %
#170
b111 .
b10111 !
b10111 '
b111 /
b111 -
b111 ,
b100 0
b1101 #
b1101 &
b1010 "
b1010 %
#172
b0 (
b0 +
b1 .
b1101 !
b1101 '
b1101 /
b0 *
b1001 -
b0 )
b1101 ,
b100 0
b1 #
b1 &
b1100 "
b1100 %
#174
b1100 (
b1100 +
b11 .
b10011 !
b10011 '
b11 /
b1100 *
b11 -
b100 )
b1011 ,
b100 0
b101 #
b101 &
b1110 "
b1110 %
#176
b0 (
b0 +
b1 .
b1001 !
b1001 '
b1001 /
b0 *
b1 -
b0 )
b1001 ,
b100 0
b1001 #
b1001 &
b0 "
b0 %
#178
b1111 .
b1111 !
b1111 '
b1111 /
b1111 -
b1111 ,
b100 0
b1101 #
b1101 &
b10 "
b10 %
#180
b1 .
b101 !
b101 '
b101 /
b1 -
b101 ,
b100 0
b1 #
b1 &
b100 "
b100 %
#182
b100 (
b100 +
b11 .
b1011 !
b1011 '
b1011 /
b100 *
b11 -
b100 )
b11 ,
b100 0
b101 #
b101 &
b110 "
b110 %
#184
b1000 (
b1000 +
b1 .
b10001 !
b10001 '
b1 /
b1000 *
b1 -
b1000 )
b1 ,
b100 0
b1001 #
b1001 &
b1000 "
b1000 %
#186
b111 .
b10111 !
b10111 '
b111 /
b111 -
b111 ,
b100 0
b1101 #
b1101 &
b1010 "
b1010 %
#188
b0 (
b0 +
b1 .
b1101 !
b1101 '
b1101 /
b0 *
b1001 -
b0 )
b1101 ,
b100 0
b1 #
b1 &
b1100 "
b1100 %
#190
b1100 (
b1100 +
b11 .
b10011 !
b10011 '
b11 /
b1100 *
b11 -
b100 )
b1011 ,
b100 0
b101 #
b101 &
b1110 "
b1110 %
